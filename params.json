{
  "name": "Elm-input-extra",
  "tagline": "Commonly used Html element with extra functionality",
  "body": "# Elm Input Extra\r\n\r\n## Number Input\r\n\r\nHtml input component that only accept numeric values. This component implements [The Elm Architecture (TEA)](http://guide.elm-lang.org/architecture/index.html).\r\n\r\n### Options\r\n * `id` is the id of the HTML element.\r\n * `maxLength` is the maximum number of character allowed in this input. Set to `Nothing` for no limit.\r\n * `maxValue` is the maximum number value allowed in this input. Set to `Nothing` for no limit.\r\n * `minValue` is the minimum number value allowed in this input. Set to `Nothing` for no limit.\r\n\r\n## Text Input\r\n\r\nHtml input component with extra feature. This component implements [The Elm Architecture (TEA)](http://guide.elm-lang.org/architecture/index.html).\r\n\r\n### Options\r\n * `id` is the id of the HTML element.\r\n * `maxLength` is the maximum number of character allowed in this input. Set to `Nothing` for no limit.\r\n\r\n\r\n\r\n## Example\r\n```elm\r\nimport Input.Number as Number\r\nimport Input.Text as Text\r\nimport Html exposing (Html, text)\r\nimport Html.Attributes exposing (style, for)\r\nimport Html.App as Html\r\n\r\ntype alias Model =\r\n    { numberModel : Number.Model\r\n    , numberOptions : Number.Options\r\n    , textModel : Text.Model\r\n    , textOptions : Text.Options\r\n    }\r\n\r\n\r\ninit : Model\r\ninit =\r\n    { numberModel = Number.init\r\n    , numberOptions =\r\n        { id = \"NumberInput\"\r\n        , maxLength = Just 4\r\n        , maxValue = Nothing\r\n        , minValue = Nothing\r\n        }\r\n    , textModel = Text.init\r\n    , textOptions =\r\n        { id = \"TextInput\"\r\n        , maxLength = Just 4\r\n        }\r\n    }\r\n\r\n\r\nview : Model -> Html Msg\r\nview model =\r\n    Html.form []\r\n        [ Html.p []\r\n            [ Html.label [ for model.numberOptions.id ] [ text \"Number Input\" ]\r\n            , Number.input model.numberOptions\r\n                [ style\r\n                    [ ( \"border\", \"1px solid #ccc\" )\r\n                    , ( \"padding\", \".5rem\" )\r\n                    , ( \"box-shadow\", \"inset 0 1px 1px rgba(0,0,0,.075);\" )\r\n                    ]\r\n                ]\r\n                model.numberModel\r\n                |> Html.map UpdateNumber\r\n            , Html.text (\"value: \" ++ model.numberModel.value)\r\n            ]\r\n        , Html.p []\r\n            [ Html.label [ for model.textOptions.id ] [ text \"Text Input\" ]\r\n            , Text.input model.textOptions\r\n                [ style\r\n                    [ ( \"border\", \"1px solid #ccc\" )\r\n                    , ( \"padding\", \".5rem\" )\r\n                    , ( \"box-shadow\", \"inset 0 1px 1px rgba(0,0,0,.075);\" )\r\n                    ]\r\n                ]\r\n                model.textModel\r\n                |> Html.map UpdateText\r\n            , Html.text (\"value: \" ++ model.textModel.value)\r\n            ]\r\n        ]\r\n\r\n\r\ntype Msg\r\n    = NoOp\r\n    | UpdateNumber Number.Msg\r\n    | UpdateText Text.Msg\r\n\r\n\r\nupdate : Msg -> Model -> Model\r\nupdate msg model =\r\n    case msg of\r\n        NoOp ->\r\n            model\r\n\r\n        UpdateNumber numberMsg ->\r\n            { model | numberModel = Number.update numberMsg model.numberModel }\r\n\r\n        UpdateText textMsg ->\r\n            { model | textModel = Text.update textMsg model.textModel }\r\n\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}